// App.js //
import React from 'react';
import './App.scss';
import Car from  './Car';

class App extends React.Component {
  constructor(props) {
    console.log('App Constructor');
    super(props);

    this.state = {
      cars: [
        {
          name: 'Ford',
          year: 2018
        },
        {
          name: 'Mazda',
          year: 2016
        }
      ],
      pageTitle: 'Hello React!',
      showCars: false
    }
  }

  onChangeName(name, index) {
    const car = this.state.cars[index];
    car.name = name;
    const cars = [...this.state.cars];
    cars[index] = car;
    this.setState({
      cars
    });
  }

  deleteItem(index) {
    const cars = [...this.state.cars];
    cars.splice(index, 1);
    this.setState({
      cars
    });
  }

  toggleCarsHandler = () => {
    this.setState({
      showCars: !this.state.showCars
    })
  }
  
  // componentWillMount() - произошла инициализация компонента, готовы параметры, и компонент готов к использованию (1) (Его уже не юзают)

  // HTML реакта готов, и мы можем еще преобразовывать (3)
  componentDidMount() {
    console.log('Component did mount');
  }

  // Этот жизненый цикл вызывается каждый раз, когда перерендерим что-то (2)
  render() {
    const divStyle = {
      'textAlign': 'center'
    };

    const cars = this.state.cars;

    return (
      <div style={divStyle}>
        {/* <h1>{this.state.pageTitle}</h1> */}
        <h1>{this.props.title}</h1>

        <button onClick={this.toggleCarsHandler}>Toggle Cars</button>

        { this.state.showCars
          ?  cars.map((car, index) => (
              <Car
                key={index}
                name={car.name}
                year={car.year}
                onChangeName={event => this.onChangeName(event.target.value, index)}
                deleteItem={this.deleteItem.bind(this, index)}
              />
            ))
          : null
        }
      </div>
    );
  }
}

export default App;
